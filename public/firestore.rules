rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner of the data
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Lock down the entire database by default
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS COLLECTION
    // Users can only access their own document space
    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }
    
    // PUBLIC ACCESS FOR VOTING AND DISPLAY
    // Allow anyone to read a specific game and its questions for display/voting
    match /users/{userId}/games/{gameId} {
      allow get: if true;
    }

    match /users/{userId}/games/{gameId}/questions/{questionId} {
      allow get: if true;

      // SECURE VOTING LOGIC:
      // Allow anyone to UPDATE a question, but only under very specific rules.
      // This prevents cheating without needing a backend server function.
      allow update: if
            // 1. The incoming request data (request.resource.data) has the same keys as the existing data (resource.data)
            request.resource.data.keys().hasAll(resource.data.keys()) &&
            // 2. The only field that can change is 'voteCounts'
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['voteCounts']) &&
            // 3. The voteCounts object itself can only have one key that changed
            request.resource.data.voteCounts.diff(resource.data.voteCounts).affectedKeys().size() == 1 &&
            // 4. The single vote count that changed was incremented by exactly 1.
            request.resource.data.voteCounts[request.resource.data.voteCounts.diff(resource.data.voteCounts).affectedKeys()[0]] == resource.data.voteCounts[request.resource.data.voteCounts.diff(resource.data.voteCounts).affectedKeys()[0]] + 1;
    }
  }
}